{"version":3,"sources":["utils/Api.ts","components/Table.tsx","pages/Home.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getUserData","axios","get","Table","useState","columns","title","field","render","rowData","src","pic","style","width","cellStyle","textAlign","data","state","setState","useEffect","a","res","console","log","results","map","user","picture","thumbnail","name","first","surname","last","email","phone","makeApiCall","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","Home","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","display","breakpoints","up","SearchAppBar","props","classes","className","AppBar","position","Toolbar","minHeight","IconButton","edge","color","aria-label","Typography","variant","noWrap","App","search","setSearch","basename","input","changeHandler","e","target","value","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e2adba52.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getUserData = () => {\r\n  return axios.get('https://randomuser.me/api/?results=200&nat=us');\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport MaterialTable, { Column } from 'material-table';\n\nimport { getUserData } from '../utils/Api';\n\ninterface Row {\n  pic: string;\n  name: string;\n  surname: string;\n  email: string;\n  phone: string;\n}\n\ninterface TableState {\n  columns: Array<Column<Row>>;\n  data: Row[];\n}\n\nexport default function Table() {\n  const [state, setState] = useState<TableState>({\n    columns: [\n      {\n        title: '',\n        field: 'pic',\n        render: rowData => <img src={rowData.pic} style={{ width: 100 }} />,\n        cellStyle: {\n          textAlign: 'center',\n        },\n      },\n      { title: 'First', field: 'name' },\n      { title: 'Last', field: 'surname' },\n      {\n        title: 'Email',\n        field: 'email',\n      },\n      {\n        title: 'Phone',\n        field: 'phone',\n      },\n    ],\n    data: [],\n  });\n\n  useEffect(() => {\n    async function makeApiCall() {\n      try {\n        const res = await getUserData();\n        console.log(res.data.results);\n        setState({\n          ...state,\n          data: res.data.results.map((user: any) => ({\n            pic: user.picture.thumbnail,\n            name: user.name.first,\n            surname: user.name.last,\n            email: user.email,\n            phone: user.phone,\n          })),\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    makeApiCall();\n  }, []);\n\n  return (\n    <MaterialTable\n      title=\"\"\n      columns={state.columns}\n      data={state.data}\n      editable={{\n        onRowAdd: (newData: Row) =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              setState(prevState => {\n                const data = [...prevState.data];\n                data.push(newData);\n                return { ...prevState, data };\n              });\n            }, 600);\n          }),\n        onRowUpdate: (newData: Row, oldData: Row | undefined) =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              if (oldData) {\n                setState(prevState => {\n                  const data = [...prevState.data];\n                  data[data.indexOf(oldData)] = newData;\n                  return { ...prevState, data };\n                });\n              }\n            }, 600);\n          }),\n        onRowDelete: (oldData: Row) =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              setState(prevState => {\n                const data = [...prevState.data];\n                data.splice(data.indexOf(oldData), 1);\n                return { ...prevState, data };\n              });\n            }, 600);\n          }),\n      }}\n    />\n  );\n}\n","import React from 'react';\n\nimport Table from '../components/Table';\n\nfunction Home() {\n  return (\n    <>\n      <div>\n        <Table />\n      </div>\n    </>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { createStyles, fade, Theme, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\n\ninterface ISearchAppBarProps {\n  input: string;\n  changeHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      display: 'none',\n      [theme.breakpoints.up('sm')]: {\n        display: 'block',\n      },\n    },\n  }),\n);\n\nexport default function SearchAppBar(props: ISearchAppBarProps) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar style={{ minHeight: '100px' }}>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"open drawer\">\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Company Directory\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Header from './components/Header';\nimport './App.css';\n\nfunction App() {\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    console.log(search);\n  });\n\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  return (\n    <Router basename=\"/UsrDirTSX\">\n      <div className=\"App\">\n        <Header input={search} changeHandler={handleSearchInputChange} />\n        <Route exact path=\"/\" component={Home} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}